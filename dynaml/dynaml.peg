package dynaml

type DynamlGrammar Peg {}

Dynaml <- Expression !.

Expression <- ws Level4 ws

Level4 <- Level3 ( req_ws Or )*
Or <- '||' req_ws Level3

Level3 <- Level2 ( Concatenation )*
Concatenation <- req_ws Level2

Level2 <-  Level1 ( req_ws ( Addition / Subtraction ) )*
Addition <- '+' req_ws Level1
Subtraction <- '-' req_ws Level1

Level1 <- Level0 ( req_ws ( Multiplication / Division ) )*
Multiplication <- '*' req_ws Level0
Division <-  '/' req_ws Level0

Level0 <- Grouped / Call / Boolean / Nil / String / Integer / List / Merge / Auto / Reference

Grouped <- '(' Expression ')'

Call <- Name '(' Arguments ')'
Name <- [a-zA-Z0-9_]+
Arguments <- Expression (NextExpression)*
NextExpression <- Comma Expression

Comma <- ','

Integer <- '-'? [0-9_]+

String <- '"' ('\\"' / !'"' .)* '"'

Boolean <- 'true' / 'false'

Nil <- 'nil'

List <- '[' Contents? ']'
Contents <- Expression (NextExpression)*

Merge <- RefMerge / SimpleMerge
RefMerge <- 'merge' req_ws Reference
SimpleMerge <- 'merge'

Auto <- 'auto'

Reference <- '.'? Key ('.' Key / '.' '[' [0-9]+ ']')*
Key <- [a-zA-Z0-9_] [a-zA-Z0-9_\-]* ( ':' [a-zA-Z0-9_] [a-zA-Z0-9_\-]* )?

ws <- [ \t\n\r]*

req_ws <- [ \t\n\r]+
